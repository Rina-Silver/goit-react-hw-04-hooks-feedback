{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","App.js","index.js"],"names":["module","exports","Section","title","children","Notification","message","className","s","notification","Statistics","good","neutral","bad","total","positivePercentage","item","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","option","feedbackBtn","type","onClick","App","useState","setGood","setNeutral","setBad","Object","keys","countTotalFeedback","values","reduce","acc","val","Math","round","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,2B,mBCAzBD,EAAOC,QAAU,CAAC,aAAe,qC,gBCAjCD,EAAOC,QAAU,CAAC,YAAc,uC,6GCcjBC,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACGD,GAAS,6BAAKA,IADjB,IAC+BC,M,gCCKpBC,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mBAAGC,UAAWC,IAAEC,aAAhB,SAA+BH,KCA3BI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAOD,EACL,qBAAIP,UAAU,OAAd,UACE,qBAAIA,UAAWC,IAAEQ,KAAjB,mBAA8BL,KAC9B,qBAAIJ,UAAWC,IAAEQ,KAAjB,sBAAiCJ,KACjC,qBAAIL,UAAWC,IAAEQ,KAAjB,kBAA6BH,KAC7B,qBAAIN,UAAWC,IAAEQ,KAAjB,oBAA+BF,KAC/B,qBAAIP,UAAWC,IAAEQ,KAAjB,gCAA2CD,EAA3C,UAGF,cAAC,EAAD,CAAcT,QAAQ,uBAW1BI,EAAWO,aAAe,CACxBN,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAGPL,Q,gBC9BTQ,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GACX,OACE,wBACEf,UAAWC,IAAEe,YAEbC,KAAK,SACLC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAJIA,SAefJ,EAAgBD,aAAe,CAC7BE,QAAS,IAGID,Q,MCrBA,SAASQ,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOf,EAAP,KAAgBiB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOd,EAAP,KAAYiB,EAAZ,KAEMX,EAAUY,OAAOC,KAAK,CAAErB,OAAMC,UAASC,QAmBvCoB,EAAqB,WAEzB,OADeF,OAAOG,OAAO,CAAEvB,OAAMC,UAASC,QAChCsB,QAAO,SAACC,EAAKC,GAEzB,OADAD,GAAOC,MAQLvB,EAAQmB,IACRlB,EAHJuB,KAAKC,MAAO5B,EAAOsB,IAAwB,KAK7C,OACE,sBAAK1B,UAAU,YAAf,UACE,cAAC,EAAD,CAASJ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBgB,QAASA,EAASC,gBAlCjB,SAAAoB,GACtB,OAAQA,GACN,IAAK,OACHZ,EAAQjB,EAAO,GACf,MACF,IAAK,UACHkB,EAAWjB,EAAU,GACrB,MACF,IAAK,MACHkB,EAAOjB,EAAM,GACb,MAEF,QACE,aAuBF,cAAC,EAAD,CAASV,MAAM,aAAf,SACE,cAAC,EAAD,CACEQ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBD,EAAQC,EAAqB,SCpD3D0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2221ab2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Statistics_item__duHdc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3wL4K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBtn\":\"FeedbackOptions_feedbackBtn__ccXfp\"};","import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>} {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className={s.notification}>{message}</p>\r\n);\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css';\r\nimport Notification from 'components/Notification/Notification';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return total ? (\r\n    <ul className=\"list\">\r\n      <li className={s.item}>Good: {good}</li>\r\n      <li className={s.item}>Neutral: {neutral}</li>\r\n      <li className={s.item}>Bad: {bad}</li>\r\n      <li className={s.item}>Total: {total}</li>\r\n      <li className={s.item}>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  ) : (\r\n    <Notification message=\"No feedback given\" />\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map(option => {\r\n      return (\r\n        <button\r\n          className={s.feedbackBtn}\r\n          key={option}\r\n          type=\"button\"\r\n          onClick={() => onLeaveFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      );\r\n    })}\r\n  </>\r\n);\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nFeedbackOptions.defaultProps = {\r\n  options: [],\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import { useState } from 'react';\nimport Section from 'components/Section/Section';\nimport Statistics from 'components/Statistics/Statistics';\nimport FeedbackOptions from 'components/FeedbackOptions/FeedbackOptions';\n\nimport './App.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = Object.keys({ good, neutral, bad });\n\n  const onLeaveFeedback = name => {\n    switch (name) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const values = Object.values({ good, neutral, bad });\n    return values.reduce((acc, val) => {\n      acc += val;\n      return acc;\n    });\n  };\n\n  const countPositivePercentage = () =>\n    Math.round((good / countTotalFeedback()) * 100);\n\n  const total = countTotalFeedback();\n  const positivePercentage = countPositivePercentage();\n\n  return (\n    <div className=\"Container\">\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={total ? positivePercentage : 0}\n        />\n      </Section>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   onLeaveFeedback = name => {\n//     this.setState(prevState => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () => {\n//     const values = Object.values(this.state);\n//     return values.reduce((acc, val) => {\n//       acc += val;\n//       return acc;\n//     });\n//   };\n\n//   countPositivePercentage = () =>\n//     Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const options = Object.keys(this.state);\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositivePercentage();\n//     return (\n//       <div className=\"Container\">\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={options}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={total ? positivePercentage : 0}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}